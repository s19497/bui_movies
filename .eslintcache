[{"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\index.tsx":"1","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\util\\themoviedb.js":"2","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\App.tsx":"3","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\reportWebVitals.ts":"4","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\PageButtons.tsx":"5","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MainPage.tsx":"6","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\SearchBar\\SearchBar.tsx":"7","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MoviePage\\MoviePage.tsx":"8","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MovieList\\MoviePreview.tsx":"9","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MovieList\\MovieList.tsx":"10","C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\util\\util.ts":"11"},{"size":503,"mtime":1610915063941,"results":"12","hashOfConfig":"13"},{"size":66044,"mtime":1611341027478,"results":"14","hashOfConfig":"13"},{"size":570,"mtime":1611253784203,"results":"15","hashOfConfig":"13"},{"size":478,"mtime":1610915063944,"results":"16","hashOfConfig":"13"},{"size":1024,"mtime":1611324889918,"results":"17","hashOfConfig":"13"},{"size":3134,"mtime":1611430411926,"results":"18","hashOfConfig":"13"},{"size":3580,"mtime":1611429896382,"results":"19","hashOfConfig":"13"},{"size":8054,"mtime":1611438363828,"results":"20","hashOfConfig":"13"},{"size":1389,"mtime":1611342142443,"results":"21","hashOfConfig":"13"},{"size":412,"mtime":1611240754611,"results":"22","hashOfConfig":"13"},{"size":573,"mtime":1611337607299,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1o52cvt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\index.tsx",[],["53","54"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\util\\themoviedb.js",["55","56","57"],"/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) Franco Cavestri\r\n *\r\n * https://github.com/cavestri/themoviedb-javascript-library\r\n *\r\n */\r\n\r\nvar theMovieDb = {};\r\n\r\ntheMovieDb.common = {\r\n    api_key: \"ffa4d0539346cc9fc1336195d1639a11\",\r\n    base_uri: \"http://api.themoviedb.org/3/\",\r\n    images_uri: \"http://image.tmdb.org/t/p/\",\r\n    timeout: 5000,\r\n    language: \"en-US\",\r\n    generateQuery: function (options) {\r\n        var myOptions, query, option;\r\n\r\n        myOptions = options || {};\r\n        query = \"?api_key=\" + theMovieDb.common.api_key;\r\n\r\n        if (Object.keys(myOptions).length > 0) {\r\n            for (option in myOptions) {\r\n                if (myOptions.hasOwnProperty(option) && option !== \"id\" && option !== \"body\") {\r\n                    query = query + \"&\" + option + \"=\" + myOptions[option];\r\n                }\r\n            }\r\n        }\r\n        return query;\r\n    },\r\n    validateCallbacks: function (success, error) {\r\n        if (typeof success !== \"function\" || typeof error !== \"function\") {\r\n            throw \"success and error parameters must be functions!\";\r\n        }\r\n    },\r\n    validateRequired: function (args, argsReq, opt, optReq, allOpt) {\r\n        var i, allOptional;\r\n\r\n        allOptional = allOpt || false;\r\n\r\n        if (args.length !== argsReq) {\r\n            throw \"The method requires  \" + argsReq + \" arguments and you are sending \" + args.length + \"!\";\r\n        }\r\n\r\n        if (allOptional) {\r\n            return;\r\n        }\r\n\r\n        if (argsReq > 2) {\r\n            for (i = 0; i < optReq.length; i = i + 1) {\r\n                if (!opt.hasOwnProperty(optReq[i])) {\r\n                    throw optReq[i] + \" is a required parameter and is not present in the options!\";\r\n                }\r\n            }\r\n        }\r\n    },\r\n    getImage: function (options) {\r\n        return theMovieDb.common.images_uri + options.size + \"/\" + options.file;\r\n    },\r\n    client: function (options, success, error) {\r\n        var method, status, xhr;\r\n\r\n        method = options.method || \"GET\";\r\n        status = options.status || 200;\r\n        xhr = new XMLHttpRequest();\r\n\r\n        xhr.ontimeout = function () {\r\n            error('{\"status_code\":408,\"status_message\":\"Request timed out\"}');\r\n        };\r\n\r\n        xhr.open(method, theMovieDb.common.base_uri + options.url, true);\r\n\r\n        if (options.method === \"POST\") {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n        }\r\n\r\n        xhr.timeout = theMovieDb.common.timeout;\r\n\r\n        xhr.onload = function (e) {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === status) {\r\n                    success(xhr.responseText);\r\n                } else {\r\n                    error(xhr.responseText);\r\n                }\r\n            } else {\r\n                error(xhr.responseText);\r\n            }\r\n        };\r\n\r\n        xhr.onerror = function (e) {\r\n            error(xhr.responseText);\r\n        };\r\n        if (options.method === \"POST\") {\r\n            xhr.send(JSON.stringify(options.body));\r\n        } else {\r\n            xhr.send(null);\r\n        }\r\n    }\r\n};\r\n\r\ntheMovieDb.configurations = {\r\n    getConfiguration: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCountries: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration/countries\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getJobs: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration/jobs\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLanguages: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration/languages\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPrimaryTranslations: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration/primary_translations\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTimezones: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"configuration/timezones\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.account = {\r\n    getInformation: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLists: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/lists\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getFavoritesMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/favorite/movies\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getFavoritesTvShows: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/favorite/tv?\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    addFavorite: function (options, success, error) {\r\n        var body;\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\", \"media_type\", \"media_id\", \"favorite\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        body = {\r\n            \"media_type\": options.media_type,\r\n            \"media_id\": options.media_id,\r\n            \"favorite\": options.favorite\r\n        }\r\n\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/favorite\" + theMovieDb.common.generateQuery(options),\r\n                status: 201,\r\n                method: \"POST\",\r\n                body: body\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRatedMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/rated/movies\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRatedTvShows: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/rated/tv\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRatedTvEpisodes: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"rated/tv/episodes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getMovieWatchlist: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/watchlist/movies\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvShowsWatchlist: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/watchlist/tv\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    addToWatchlist: function (options, success, error) {\r\n\r\n        var body;\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\", \"media_type\", \"media_id\", \"watchlist\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        body = {\r\n            \"media_type\": options.media_type,\r\n            \"media_id\": options.media_id,\r\n            \"watchlist\": options.watchlist\r\n        }\r\n\r\n        theMovieDb.common.client({\r\n                url: \"account/\" + options.id + \"/watchlist\" + theMovieDb.common.generateQuery(options),\r\n                method: \"POST\",\r\n                status: 201,\r\n                body: body\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.authentication = {\r\n    generateToken: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"authentication/token/new\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    askPermissions: function (options) {\r\n\r\n        window.open(\"https://www.themoviedb.org/authenticate/\" + options.token + \"?redirect_to=\" + options.redirect_to);\r\n\r\n    },\r\n    validateUser: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"request_token\", \"username\", \"password\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"authentication/token/validate_with_login\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    generateSession: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"request_token\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"authentication/session/new\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    generateGuestSession: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"authentication/guest_session/new\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.certifications = {\r\n    getMovieList: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"certification/movie/list\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvList: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"certification/tv/list\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.changes = {\r\n    getMovieChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPersonChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.collections = {\r\n    getDetails: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"collection/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"collection/\" + options.id + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTranslations: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"collection/\" + options.id + \"/translations\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.companies = {\r\n    getDetails: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"company/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAlternativeNames: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"company/\" + options.id + \"/alternative_names\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n\r\n};\r\n\r\ntheMovieDb.credits = {\r\n    getDetails: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"credit/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.discover = {\r\n    getMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"discover/movie\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvShows: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"discover/tv\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n\r\n};\r\n\r\ntheMovieDb.find = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\", \"external_source\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"find/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.genres = {\r\n    getMovieList: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"genre/movie/list\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"genre/\" + options.id + \"/movies\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvList: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"genre/tv/list\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n\r\n};\r\n\r\ntheMovieDb.guestSession = {\r\n    getRatedMovies: function (success, error, options) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"guest_session/\" + options.id + \"/rated/movies\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRatedTvShows: function (success, error, options) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"guest_session/\" + options.id + \"/rated/tv\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRatedTvEpisodes: function (success, error, options) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"guest_session/\" + options.id + \"/rated/tv/episodes\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.keywords = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"keyword/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"keyword/\" + options.id + \"/movies\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.lists = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"list/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getStatusById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\", \"movie_id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"list/\" + options.id + \"/item_status\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    addList: function (options, success, error) {\r\n\r\n        var body;\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"name\", \"description\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        body = {\r\n            \"name\": options.name,\r\n            \"description\": options.description\r\n        };\r\n\r\n        delete options.name;\r\n        delete options.description;\r\n\r\n        if (options.hasOwnProperty(\"language\")) {\r\n            body[\"language\"] = options.language;\r\n\r\n            delete options.language;\r\n        }\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"list\" + theMovieDb.common.generateQuery(options),\r\n                body: body\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    addItem: function (options, success, error) {\r\n\r\n        var body;\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\", \"media_id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        body = {\r\n            \"media_id\": options.media_id\r\n        };\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"list/\" + options.id + \"/add_item\" + theMovieDb.common.generateQuery(options),\r\n                body: body\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeItem: function (options, success, error) {\r\n\r\n        var body;\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\", \"media_id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        body = {\r\n            \"media_id\": options.media_id\r\n        };\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"list/\" + options.id + \"/remove_item\" + theMovieDb.common.generateQuery(options),\r\n                body: body\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeList: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 204,\r\n                url: \"list/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    clearList: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\", \"confirm\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 204,\r\n                body: {},\r\n                url: \"list/\" + options.id + \"/clear\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.movies = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStates: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStatesGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAlternativeTitles: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/alternative_titles\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getExternalIds: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/external_ids\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getKeywords: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/keywords\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getReleases: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/release_dates\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getVideos: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/videos\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTranslations: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/translations\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getRecommendations: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/recommendations\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getSimilarMovies: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/similar\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getReviews: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/reviews\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLists: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/\" + options.id + \"/lists\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLatest: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/latest\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getUpcoming: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/upcoming\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getNowPlaying: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/now_playing\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPopular: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/popular\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTopRated: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"movie/top_rated\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rate: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"movie/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rateGuest: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"movie/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRate: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"movie/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRateGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"movie/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.networks = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"network/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAlternativeNames: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"network/\" + options.id + \"/alternative_names\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.people = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getMovieCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/movie_credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTvCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/tv_credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/combined_credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getExternalIds: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/external_ids\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTaggedImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/tagged_images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/\" + options.id + \"/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPopular: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/popular\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLatest: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"person/latest\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.reviews = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"review/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.search = {\r\n    getMovie: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/movie\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCollection: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/collection\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTv: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/tv\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPerson: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/person\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCompany: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/company\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getKeyword: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/keyword\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getMulti: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"query\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"search/multi\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.tv = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStates: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStatesGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAlternativeTitles: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/alternative_titles\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getContentRatings: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/content_ratings\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getExternalIds: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/external_ids\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getKeywords: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/keywords\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n\r\n    },\r\n    getRecommendations: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/recommendations\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getReviews: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/reviews\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getScreenedTheatrically: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/screened_theatrically\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getSimilar: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/similar\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTranslations: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/translations\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getVideos: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/videos\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAiringToday: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/airing_today\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getLatest: function (success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 2, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/latest\" + theMovieDb.common.generateQuery()\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getOnTheAir: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/on_the_air\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getPopular: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/popular\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getTopRated: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, \"\", \"\", true);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/top_rated\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rate: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"tv/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rateGuest: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"tv/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRate: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"tv/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRateGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"tv/\" + options.id + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.tvSeasons = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/season/\" + options.id + \"/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStates: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStatesGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getExternalIds: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/external_ids\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getVideos: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/videos\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\ntheMovieDb.tvEpisodes = {\r\n    getById: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getChanges: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/episode/\" + options.id + \"/changes\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStates: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"session_id\", \"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getAccountStatesGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"guest_session_id\", \"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/account_states\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getCredits: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/credits\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getExternalIds: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/external_ids\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getImages: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/images\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    getVideos: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/videos\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rate: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"episode_number\", \"season_number\", \"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    rateGuest: function (options, rate, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 4, options, [\"episode_number\", \"season_number\", \"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"POST\",\r\n                status: 201,\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/rating\" + theMovieDb.common.generateQuery(options),\r\n                body: {\r\n                    \"value\": rate\r\n                }\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRate: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/rating\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    },\r\n    removeRateGuest: function (options, success, error) {\r\n\r\n        theMovieDb.common.validateRequired(arguments, 3, options, [\"episode_number\", \"season_number\", \"guest_session_id\", \"id\"]);\r\n\r\n        theMovieDb.common.validateCallbacks(success, error);\r\n\r\n        theMovieDb.common.client({\r\n                method: \"DELETE\",\r\n                status: 200,\r\n                url: \"tv/\" + options.id + \"/season/\" + options.season_number + \"/episode/\" + options.episode_number + \"/rating\" + theMovieDb.common.generateQuery(options)\r\n            },\r\n            success,\r\n            error\r\n        );\r\n    }\r\n};\r\n\r\nif ((typeof module != 'undefined') && (module.exports)) {\r\n    module.exports = theMovieDb;\r\n}",["58","59"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\App.tsx",["60"],"import React from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport './App.scss';\r\nimport MainPage from \"./main_page/MainPage/MainPage\";\r\nimport MoviePage from \"./main_page/MoviePage/MoviePage\";\r\nimport Switch from \"react-bootstrap/Switch\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Route path=\"/movie/:id\" component={MoviePage}/>\r\n                <Route path=\"/\" exact={true} component={MainPage}/>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n",["61","62"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\reportWebVitals.ts",[],["63","64"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\PageButtons.tsx",["65"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MainPage.tsx",["66"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\SearchBar\\SearchBar.tsx",["67","68","69"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MoviePage\\MoviePage.tsx",["70","71","72","73"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MovieList\\MoviePreview.tsx",[],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\main_page\\MainPage\\MovieList\\MovieList.tsx",[],["74","75"],"C:\\Users\\jan\\Documents\\PJA\\BIU\\bui_movies\\src\\util\\util.ts",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":35,"column":13,"nodeType":"82","messageId":"83","endLine":35,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":44,"column":13,"nodeType":"82","messageId":"83","endLine":44,"endColumn":109},{"ruleId":"80","severity":1,"message":"81","line":54,"column":21,"nodeType":"82","messageId":"83","endLine":54,"endColumn":101},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":14},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","replacedBy":"85"},{"ruleId":"76","replacedBy":"90"},{"ruleId":"78","replacedBy":"91"},{"ruleId":"86","severity":1,"message":"92","line":1,"column":16,"nodeType":"88","messageId":"89","endLine":1,"endColumn":24},{"ruleId":"93","severity":1,"message":"94","line":64,"column":8,"nodeType":"95","endLine":64,"endColumn":61,"suggestions":"96"},{"ruleId":"86","severity":1,"message":"97","line":4,"column":9,"nodeType":"88","messageId":"89","endLine":4,"endColumn":27},{"ruleId":"86","severity":1,"message":"98","line":4,"column":29,"nodeType":"88","messageId":"89","endLine":4,"endColumn":40},{"ruleId":"86","severity":1,"message":"99","line":6,"column":9,"nodeType":"88","messageId":"89","endLine":6,"endColumn":17},{"ruleId":"86","severity":1,"message":"100","line":2,"column":47,"nodeType":"88","messageId":"89","endLine":2,"endColumn":50},{"ruleId":"93","severity":1,"message":"101","line":26,"column":27,"nodeType":"95","endLine":26,"endColumn":29,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":129,"column":53,"nodeType":"105","messageId":"106","endLine":129,"endColumn":55},{"ruleId":"107","severity":1,"message":"108","line":134,"column":45,"nodeType":"109","endLine":136,"endColumn":70},{"ruleId":"76","replacedBy":"110"},{"ruleId":"78","replacedBy":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["112"],["113"],"@typescript-eslint/no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar",["112"],["113"],"'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchByGenre', 'fetchByName', 'fetchPopular', and 'query'. Either include them or remove the dependency array.","ArrayExpression",["114"],"'BrowserRouterProps' is defined but never used.","'useLocation' is defined but never used.","'delQuery' is defined but never used.","'Row' is defined but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["115"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["112"],["113"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [currentSort, currentPage, currentText, currentGenre, query, fetchPopular, fetchByName, fetchByGenre]",{"range":"120","text":"121"},"Update the dependencies array to be: [match.params.id]",{"range":"122","text":"123"},[2376,2429],"[currentSort, currentPage, currentText, currentGenre, query, fetchPopular, fetchByName, fetchByGenre]",[996,998],"[match.params.id]"]